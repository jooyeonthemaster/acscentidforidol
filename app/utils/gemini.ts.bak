import { GoogleGenerativeAI, Part } from '@google/generative-ai';

// API 키 환경 변수에서 가져오기
const apiKey = process.env.GEMINI_API_KEY || process.env.NEXT_PUBLIC_GEMINI_API_KEY;
console.log('API 키 로딩: ', apiKey ? `키가 설정됨 (${apiKey.substring(0, 3)}..${apiKey.substring(apiKey.length-3)})` : 'API 키 없음');

if (!apiKey) {
  console.error('⚠️ GEMINI_API_KEY가 설정되지 않았습니다. .env.local 파일을 확인하세요.');
}

// Gemini API 초기화
console.log('Gemini API 초기화 시작');
const genAI = new GoogleGenerativeAI(apiKey || '');
console.log('Gemini API 초기화 완료');

// 채팅 모델 - Gemini 1.5 Pro -> Gemini 2.0 Flash로 통일 (코드에 맞춤)
console.log('모델 초기화 시작: gemini-2.0-flash');
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
console.log('모델 초기화 완료: gemini-2.0-flash');

/**
 * 이미지를 분석하여 특성 점수, 퍼스널 컬러, 매칭 향수 등의 정보를 추출
 */
export async function analyzeIdolImage(
  imageBase64: string, 
  idolInfo: { 
    name: string; 
    group: string; 
    style: string[]; 
    personality: string[]; 
    charms: string;
  }
) {
  try {
    console.log('analyzeIdolImage 함수 시작');
    // API 키 확인
    if (!apiKey) {
      console.error('Gemini API 키가 설정되지 않았습니다.');
      throw new Error('API 키가 설정되지 않았습니다. 환경 변수를 확인해주세요.');
    }

    // API 키 마스킹하여 로깅 (보안)
    const maskedKey = apiKey.substring(0, 4) + '******' + apiKey.substring(apiKey.length - 4);
    console.log(`Gemini API 키 확인: ${maskedKey}`);

    // 이미지 크기 확인 및 로깅
    console.log(`이미지 데이터 크기: ${Math.round(imageBase64.length / 1024)}KB`);
    if (imageBase64.length > 1024 * 1024 * 2) { // 2MB 제한
      console.warn('이미지 크기가 2MB를 초과합니다. 처리 시간이 오래 걸릴 수 있습니다.');
    }

    // 이미지 프롬프트 구성
    console.log('이미지 및 텍스트 프롬프트 구성 시작');
    const imagePart: Part = {
      inlineData: {
        data: imageBase64,
        mimeType: 'image/jpeg',
      },
    };

    // 텍스트 프롬프트 설정
    const textPart: Part = {
      text: `
당신은 K-POP 아이돌 이미지를 분석하고 이에 어울리는 향수를 추천하는 전문가입니다.
다음은 사용자가 입력한 최애 아이돌에 대한 정보입니다:

- 이름: ${idolInfo.name || '정보 없음'}
- 그룹: ${idolInfo.group || '정보 없음'}
- 스타일: ${idolInfo.style?.join(', ') || '정보 없음'}
- 성격: ${idolInfo.personality?.join(', ') || '정보 없음'}
- 매력 포인트: ${idolInfo.charms || '정보 없음'}

첨부된 이미지를 분석하여 다음 요소를 포함한 JSON 형식의 응답을 생성해주세요:

1. 특성 점수 (1-10점 척도, 점수를 과장되게 표현해주세요. 최소 3점 이상, 최대한 뚜렷한 차이가 나도록):
   - sexy: 섹시함 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - cute: 귀여움 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - charisma: 카리스마 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - darkness: 다크함 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - freshness: 청량함 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - elegance: 우아함 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - freedom: 자유로움 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - luxury: 럭셔리함 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - purity: 순수함 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)
   - uniqueness: 독특함 정도 (더 뚜렷하게 표현, 3-10점 사이 숫자)

특성 점수는 절대 모두 같은 점수로 주지 마세요. 각 특성마다 최소 1점 이상 차이가 나게 해주세요.
가장 높은 특성 점수는 9-10점, 가장 낮은 특성 점수는 3-4점 정도로 차등을 두어 평가해주세요.

2. 이미지 분석:
   - dominantColors: 이미지의 주요 색상 (HEX 코드 배열)
   - personalColor: {
       season: "spring" | "summer" | "autumn" | "winter",
       tone: "bright" | "light" | "mute" | "deep",
       palette: [HEX 색상 코드 배열],
       description: 퍼스널 컬러 설명
     }
   - faceShape: 얼굴형 분석 (선택사항)
   - expression: 표정 분석 (선택사항)

3. 분위기 분석 (감성적이고 자세하게 표현해주세요):
   - analysis: {
       mood: 전반적인 분위기 (상세하고 표현력 있게),
       style: 패션 또는 시각적 스타일 (구체적으로),
       expression: 표현 방식 (풍부한 표현으로),
       concept: 컨셉 키워드 (다양하게)
     }
   - matchingKeywords: 이미지와 매칭되는 키워드 배열 (최소 10개 이상)
   - imageAssociations: 연상되는 이미지나 장면 배열 (창의적이고 구체적으로)
   - colorStory: 이미지에서 느껴지는 색상 스토리 (서술적으로)

4. 이미지 분석 근거:
   - visualTraits: 이미지에서 눈에 띄는 시각적 특징들 (최소 5개)
   - whyRatings: 각 특성 점수를 그렇게 매긴 시각적 근거 (각 특성별로 설명)
   - uniquePoints: 해당 아이돌/이미지만의 독특한 매력 포인트 (상세히)

모든 응답은 JSON 형식이어야 하며, 한글로 작성해주세요. 특성 점수는 정수로만 표현하되, 뚜렷한 차이가 나도록 과장해서 표현해주세요. 분석은 최대한 다채롭고 창의적으로 작성해주세요.
`,
    };
    console.log('이미지 및 텍스트 프롬프트 구성 완료');

    // 타임아웃 설정 (90초, 더 여유 있게)
    const timeout = 90000;
    console.log(`Gemini API 호출 시작 (타임아웃: ${timeout / 1000}초)`);
    console.log(`사용 모델: gemini-2.0-flash`);
    console.log(`프롬프트 내용 길이: ${(textPart.text || '').length}자`);
    console.log(`이미지 데이터 길이: ${imageBase64.length}자 (Base64)`);
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => {
        console.error('타임아웃 발생: Gemini API 호출 시간이 초과되었습니다.');
        reject(new Error('Gemini API 호출 시간이 초과되었습니다. 서버 부하가 높거나 이미지가 너무 복잡할 수 있습니다.'));
      }, timeout);
    });

    // 응답 생성 (타임아웃 적용)
    console.time('gemini-api-call');
    console.log('API 호출 직전');
    const resultPromise = model.generateContent([imagePart, textPart]);
    console.log('API 요청 전송 완료, 응답 대기 중...');
    const result = await Promise.race([resultPromise, timeoutPromise as Promise<any>]);
    console.log('API 응답 수신');
    console.timeEnd('gemini-api-call');
    
    // API 응답 상세 로깅
    console.log('Gemini API 응답 수신 완료');
    console.log('응답 객체 타입:', typeof result);
    console.log('응답 객체 키:', Object.keys(result));
    
    // 응답 객체 구조 검사 (JSON으로 변환 불가능한 속성 제외)
    const safeResponseObj = { ...result };
    // 순환 참조나 함수 등 JSON으로 직렬화할 수 없는 속성 제거
    for (const key in safeResponseObj) {
      if (typeof safeResponseObj[key] === 'function' || typeof safeResponseObj[key] === 'symbol') {
        delete safeResponseObj[key];
      }
    }
    try {
      console.log('응답 객체 구조:', JSON.stringify(safeResponseObj, null, 2).substring(0, 500) + '...');
    } catch (e: unknown) {
      if (e instanceof Error) {
        console.log('응답 객체를 JSON으로 변환할 수 없습니다:', e.message);
        console.log('응답 객체 직접 출력:', Object.keys(safeResponseObj).join(', '));
      } else {
        console.log('응답 객체를 JSON으로 변환할 수 없습니다: 알 수 없는 오류');
      }
    }
    
    // response 속성 검사
    if (!result.response) {
      console.error('응답에 response 속성이, 없습니다. 응답 구조:', result);
      throw new Error('API 응답 형식이 예상과 다릅니다.');
    }
    
    console.log('response 타입:', typeof result.response);
    console.log('response 키:', Object.keys(result.response));
    
    // text() 메서드 확인 및 호출
    if (typeof result.response.text !== 'function') {
      console.error('응답의 text 메서드가 존재하지 않습니다. 대신 응답 구조를 확인합니다.');
      // 대체 방법: candidates 배열에서 직접 텍스트 추출 시도
      if (result.response.candidates && result.response.candidates.length > 0) {
        const candidate = result.response.candidates[0];
        console.log('첫 번째 candidate 키:', Object.keys(candidate));
        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
          const textPart = candidate.content.parts.find((part: any) => part.text);
          if (textPart) {
            const responseText = textPart.text;
            console.log('응답 텍스트 추출 성공 (candidates에서):', responseText.substring(0, 100) + '...');
            return processResponseText(responseText);
          }
        }
      }
      throw new Error('응답에서 텍스트를 추출할 수 없습니다.');
    }
    
    let responseText;
    try {
      responseText = result.response.text();
      console.log('Gemini API 응답 텍스트 길이:', responseText.length);
      console.log('응답 텍스트 샘플:', responseText.substring(0, 200) + '...');
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : '알 수 없는 오류';
      console.error('text() 메서드 호출 실패:', errorMessage);
      
      // 대안 1: candidates에서 직접 텍스트 추출 시도
      if (result.response.candidates && result.response.candidates.length > 0) {
        const candidate = result.response.candidates[0];
        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
          const textPart = candidate.content.parts.find((part: any) => part.text);
          if (textPart) {
            responseText = textPart.text;
            console.log('대체 방법으로 응답 텍스트 추출 성공:', responseText.substring(0, 100) + '...');
          }
        }
      }
      
      // 대안 2: getText() 등의 다른 메서드 시도
      if (!responseText && typeof result.response.getText === 'function') {
        try {
          responseText = result.response.getText();
          console.log('getText() 메서드로 응답 텍스트 추출 성공:', responseText.substring(0, 100) + '...');
        } catch (e) {
          console.error('getText() 메서드도 실패:', e instanceof Error ? e.message : '알 수 없는 오류');
        }
      }
      
      // 여전히 실패한 경우
      if (!responseText) {
        throw new Error('응답 텍스트를 추출할 수 없습니다: ' + errorMessage);
      }
    }
    
    return processResponseText(responseText);
    
  } catch (error: any) {
    // 타임아웃 오류 처리
    if (error.message && error.message.includes('시간이 초과되었습니다')) {
      console.error('Gemini API 호출 타임아웃:', error);
      throw new Error('이미지 분석 시간이 초과되었습니다. 이미지 크기를 줄이거나 더 간단한 이미지를 업로드해 보세요.');
    }
    
    // API 권한 오류 처리
    if (error.message && (error.message.includes('API key') || error.message.includes('권한'))) {
      console.error('Gemini API 권한 오류:', error);
      throw new Error('API 키 문제로 이미지 분석에 실패했습니다. 관리자에게 문의해주세요.');
    }
    
    // 네트워크 오류 처리
    if (error.message && (error.message.includes('network') || error.message.includes('네트워크'))) {
      console.error('네트워크 오류:', error);
      throw new Error('네트워크 연결 문제로 이미지 분석에 실패했습니다. 인터넷 연결을 확인하고 다시 시도해주세요.');
    }
    
    // Iterable 관련 오류 처리
    if (error.message && error.message.includes('Iterable')) {
      console.error('Iterable 관련 오류:', error);
      console.error('이 오류는 API 응답 처리 방식의 변경으로 인한 것일 수 있습니다.');
      throw new Error('API 응답 형식이 변경되었습니다. 개발자에게 문의해주세요.');
    }
    
    // 일반 오류 처리
    console.error('Gemini 이미지 분석 오류:', error);
    throw new Error('이미지 분석 중 오류가 발생했습니다: ' + (error.message || '알 수 없는 오류'));
  }
}

// 응답 텍스트 처리 함수 (기존 로직을 별도 함수로 분리)
function processResponseText(responseText: string) {
  try {
    console.log('==== Gemini API 응답 텍스트 처리 시작 ====');
    console.log('원본 응답 텍스트 전체:');
    console.log(responseText);
    console.log('==== 원본 응답 끝 ====');
    
    // JSON 응답 추출 (다양한 패턴에 대응)
    const jsonMatch = responseText.match(/```(?:json)?([\s\S]*?)```/) || 
                     responseText.match(/{[\s\S]*}/);
    
    const jsonStr = jsonMatch ? jsonMatch[1] : responseText;
    const cleanedJsonStr = jsonStr.trim();
    
    console.log('추출된 JSON 문자열 (처음 300자):', cleanedJsonStr.substring(0, 300) + '...');
    
    let parsedResult;
    try {
      parsedResult = JSON.parse(cleanedJsonStr);
      console.log('첫 번째 시도: JSON 파싱 성공');
      console.log('파싱된 JSON 데이터 전체:');
      console.log(JSON.stringify(parsedResult, null, 2));
    } catch (parseError) {
      console.error('첫 번째 시도: JSON 파싱 실패, 오류:', parseError);
      // JSON 형식 정리 시도
      const fixedStr = cleanedJsonStr
        .replace(/(\w+)(?=:)/g, '"$1"') // 키 이름에 따옴표 추가
        .replace(/'/g, '"'); // 작은 따옴표를 큰 따옴표로 변경
      
      console.log('정리된 JSON 문자열 (처음 300자):', fixedStr.substring(0, 300) + '...');
      
      try {
        parsedResult = JSON.parse(fixedStr);
        console.log('두 번째 시도: 정리 후 JSON 파싱 성공');
        console.log('파싱된 JSON 데이터 전체:');
        console.log(JSON.stringify(parsedResult, null, 2));
      } catch (secondParseError) {
        console.error('두 번째 시도: 정리 후에도 파싱 실패, 오류:', secondParseError);
        
        // 세 번째 시도: ResponseTextParser 클래스로 파싱
        console.log('세 번째 시도: 직접 파싱 시도');
        try {
          // 가장 간단한 형태의 JSON 패턴 찾기
          const simplePatterns = [
            /{[\s\S]*}/,                        // 중괄호로 둘러싸인 객체
            /\[[\s\S]*\]/,                      // 대괄호로 둘러싸인 배열
            /\{[^{]*"traits"[\s\S]*?\}/,        // traits를 포함하는 객체
            /\{[^{]*"personalColor"[\s\S]*?\}/, // personalColor를 포함하는 객체
          ];
          
          let foundJson = '';
          for (const pattern of simplePatterns) {
            const match = responseText.match(pattern);
            if (match && match[0]) {
              foundJson = match[0];
              console.log('일치하는 패턴 발견:', pattern);
              break;
            }
          }
          
          if (foundJson) {
            console.log('발견된 JSON 형태 문자열 (처음 300자):', foundJson.substring(0, 300) + '...');
            parsedResult = JSON.parse(foundJson);
            console.log('세 번째 시도: 패턴 매칭 후 JSON 파싱 성공');
            console.log('파싱된 JSON 데이터 전체:');
            console.log(JSON.stringify(parsedResult, null, 2));
          } else {
            // 직접 키-값 쌍 파싱 시도
            console.log('직접 키-값 파싱 시도 중...');
            throw new Error('JSON 패턴을 찾을 수 없습니다');
          }
        } catch (thirdParseError) {
          console.error('세 번째 시도: 직접 파싱 실패, 오류:', thirdParseError);
          
          // 네 번째 시도: 기본값 생성
          console.log('네 번째 시도: 기본값 생성');
          parsedResult = createDefaultResult();
          console.log('기본값 생성 결과:');
          console.log(JSON.stringify(parsedResult, null, 2));
        }
      }
    }
    
    console.log('파싱된 결과 구조:', Object.keys(parsedResult).join(', '));
    
    // 응답 검증: traits 객체가 있고 모든 특성 점수가 있는지 확인
    if (!parsedResult.traits) {
      console.error('특성 점수가 없습니다. API 응답:', JSON.stringify(parsedResult, null, 2));
      throw new Error('응답에 특성 점수가 포함되어 있지 않습니다.');
    }
    
    // 필수 필드 확인
    const requiredFields = ['traits', 'personalColor', 'analysis', 'matchingKeywords'];
    const missingFields = requiredFields.filter(field => !parsedResult[field]);
    
    if (missingFields.length > 0) {
      console.error(`누락된 필드가 있습니다: ${missingFields.join(', ')}`);
      console.error('불완전한 응답:', JSON.stringify(parsedResult, null, 2));
      // 누락된 필드가 있어도 traits가 있으면 계속 진행
      if (!parsedResult.traits) {
        throw new Error('필수 특성 점수 필드가 누락되었습니다.');
      }
    }
    
    // 모든 특성 점수가 동일한지 확인 (예를 들어, 모두 5점인 경우)
    const traitValues = Object.values(parsedResult.traits);
    const allSameValue = traitValues.every(val => val === traitValues[0]);
    
    if (allSameValue) {
      console.warn('모든 특성 점수가 동일합니다. 다시 시도합니다.');
      throw new Error('모든 특성 점수가 동일하게 설정되었습니다.');
    }
    
    // 특성 점수를 3-10 사이로 제한 및 다양성 확보
    let hasAdjustedScores = false;
    const scoresSeen = new Set();
    
    Object.keys(parsedResult.traits).forEach(key => {
      const score = parsedResult.traits[key];
      
      // 점수가 범위를 벗어나면 조정
      if (typeof score !== 'number' || score < 3 || score > 10) {
        const adjustedScore = Math.max(3, Math.min(10, score || Math.floor(Math.random() * 8) + 3));
        parsedResult.traits[key] = adjustedScore;
        hasAdjustedScores = true;
      }
      
      // 중복 점수 확인
      scoresSeen.add(parsedResult.traits[key]);
    });
    
    // 모든 특성의 점수가 3개 이하의 다른 값만 있는 경우, 더 다양하게 만들기
    if (scoresSeen.size <= 3) {
      console.warn('특성 점수의 다양성이 부족합니다. 점수를 더 다양하게 조정합니다.');
      const targetTraits = Object.keys(parsedResult.traits);
      const availableScores = [3, 4, 5, 6, 7, 8, 9, 10];
      
      // 기존 점수의 상대적 순위는 유지하면서 새로운 점수 할당
      const traitEntries = targetTraits.map(key => ({ 
        key, 
        score: parsedResult.traits[key] 
      })).sort((a, b) => a.score - b.score);
      
      traitEntries.forEach((trait, idx) => {
        // 상대적 위치를 유지하면서 새 점수 할당
        const newScore = availableScores[Math.min(Math.floor(idx * availableScores.length / traitEntries.length), availableScores.length - 1)];
        parsedResult.traits[trait.key] = newScore;
      });
      
      hasAdjustedScores = true;
    }
    
    if (hasAdjustedScores) {
      console.log('특성 점수가 조정되었습니다:', parsedResult.traits);
    }
    
    console.log('분석된 특성 점수:', parsedResult.traits);
    console.log('==== Gemini API 응답 텍스트 처리 끝 ====');
    return parsedResult;
  } catch (e: unknown) {
    const errorMessage = e instanceof Error ? e.message : '알 수 없는 오류';
    console.error('JSON 파싱 오류:', errorMessage);
    console.error('오류 발생한 원본 텍스트 (처음 300자):', responseText.substring(0, 300));
    throw new Error('응답 형식이 올바르지 않습니다. 다시 시도해주세요.');
  }
}

// 기본 결과 생성 함수
function createDefaultResult() {
  console.log('기본 분석 결과 생성');
  return {
    traits: {
      sexy: 7,
      cute: 5,
      charisma: 8,
      darkness: 4,
      freshness: 6,
      elegance: 9,
      freedom: 7,
      luxury: 8,
      purity: 5,
      uniqueness: 6
    },
    scentCategories: {
      citrus: 7,
      floral: 5,
      woody: 3,
      musky: 6,
      fruity: 8,
      spicy: 4
    },
    personalColor: {
      season: 'spring',
      tone: 'bright',
      palette: ['#FFD700', '#FFA500', '#FF4500'],
      description: '밝고 생동감 있는 봄 타입 컬러'
    },
    analysis: {
      mood: '활기차고 매력적인 분위기',
      style: '트렌디하고 개성있는 스타일',
      expression: '자신감 있는 표현',
      concept: '에너지'
    },
    matchingKeywords: [
      '매력적', '트렌디', '개성적', '자신감', '에너지',
      '스타일리시', '독특함', '생동감', '활력', '밝음'
    ],
    dominantColors: ['#FFD700', '#FF4500', '#1E90FF']
  };
} 